# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: webhooks
  namespace: utilities
spec:
  interval: 15m
  chart:
    spec:
      chart: app-template
      version: 14.5.2
      sourceRef:
        kind: HelmRepository
        name: truecharts
        namespace: flux-system
      interval: 15m
  timeout: 20m
  maxHistory: 3
  driftDetection:
    mode: warn
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    image:
      repository: ghcr.io/webhooksite/webhook.site
      pullPolicy: IfNotPresent
      tag: latest

    credentials:
      s3v2:
        type: s3
        url: "${S3_MINIO_URL}" # http://internal.hostname.local:9000
        bucket: "${S3_MINIO_BUCKET_PREFIX}-{{ .Chart.Name }}"
        accessKey: "${S3_MINIO_KEY_ID}"
        secretKey: "${S3_MINIO_SECRET_KEY}"
        encrKey: "${S3_MINIO_SECRET_KEY}"

    workload:
      main:
        podSpec:
          containers:
            main:
              imageSelector: image
              env:
                PORT: "{{ .Values.service.main.ports.main.port }}"
    ingress:
      main:
        enabled: true
        hosts:
          - host: webhooks.${DOMAIN_1}
        integrations:
          certManager:
            enabled: true
            certificateIssuer: domain-1-le-prod
    service:
      main:
        targetSelector: main
        ports:
          main:
            protocol: http
            port: 8084
            targetPort: 8084

# apiVersion: v2
# name: webhooksite
# description: A Helm chart for webhook.site
# type: application
# version: 0.1.0  # Update this as needed
# appVersion: "latest" # Update this as needed

# Define values that can be overridden
    # service:
    #   type: ClusterIP # Or LoadBalancer if you need external access
    #   port: 80
    #   targetPort: 8080 # This should match the container's port

    # ingress:
    #   enabled: false # Set to true if you want to use an Ingress
    #   annotations: {}
    #   hosts:
    #     - host: webhook.example.com # Replace with your domain
    #       paths:
    #         - path: /
    #           pathType: Prefix

    # resources: # Resource limits and requests
    #   requests:
    #     cpu: 100m
    #     memory: 128Mi
    #   limits:
    #     cpu: 500m
    #     memory: 256Mi

    # Environment variables
    # env:
      # Example:
      # - name: SOME_ENV_VAR
      #   value: "some_value"

    # Persistent Volume Claim (PVC) - If needed for data persistence
    # persistence:
    #   data:
    #     enabled: true
    #     # targetSelector:
    #     #   main:
    #     mountPath: "/app/backend/data"
    #     volsync:
    #       - name: data1
    #         type: restic
    #         credentials: s3v2
    #         dest:
    #           enabled: true
    #         src:
    #           enabled: true
    persistence:
      enabled: false
      storageClass: "" # Provide a storage class name
      size: 1Gi

    # # Node selector for scheduling
    # nodeSelector: {}

    # # Tolerations for taints
    # tolerations: []

    # # Affinity for pods
    # affinity: {}

    # Service Account
    # serviceAccount:
    #   create: true
    #   name: webhooksite-knox  # Customize the name

    # Security Context for the pod
    # securityContext:
    #   runAsUser: 1000  # Example
    #   runAsGroup: 1000 # Example
    #   fsGroup: 1000   # Example


  # Define the templates that will be deployed

  # templates:
  #   - deployment.yaml
  #   - service.yaml
  #   - ingress.yaml # Only if ingress.enabled is true
  #   - serviceaccount.yaml # If serviceAccount.create is true
  #   - pvc.yaml # Only if persistence.enabled is true
